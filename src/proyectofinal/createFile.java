package proyectofinal;

import java.awt.HeadlessException;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author OSCAR
 */
public class createFile extends javax.swing.JFrame {

    /**
     * Creates new form readFile
     */
    String key = "sRJkFJ4FfD6M";
    int n = 0;

    public createFile() {
        initComponents();
        setIconImage(new ImageIcon(getClass().getResource("/images/icon.png")).getImage());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar2 = new javax.swing.JToolBar();
        importBtn = new javax.swing.JButton();
        saveBtn = new javax.swing.JButton();
        fileSource = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        dataArea = new javax.swing.JTextArea();
        statusLbl = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem5 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Create File");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jToolBar2.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jToolBar2.setFloatable(false);
        jToolBar2.setRollover(true);

        importBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/TEXTFILE.png"))); // NOI18N
        importBtn.setText("Importar");
        importBtn.setToolTipText("Importar Texto");
        importBtn.setFocusable(false);
        importBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        importBtn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        importBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importBtnActionPerformed(evt);
            }
        });
        jToolBar2.add(importBtn);

        saveBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/COMPRESS.png"))); // NOI18N
        saveBtn.setText("Guardar/Comprimir");
        saveBtn.setToolTipText("Guardar");
        saveBtn.setFocusable(false);
        saveBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        saveBtn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        saveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBtnActionPerformed(evt);
            }
        });
        jToolBar2.add(saveBtn);

        dataArea.setColumns(20);
        dataArea.setRows(5);
        jScrollPane2.setViewportView(dataArea);

        statusLbl.setText("Status: Inactivo");

        jMenu1.setText("File");

        jMenuItem2.setText("Importar Texto");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem1.setText("Guardar");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem3.setText("Cifrar y Guardar");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuItem7.setText("Comprimir, Cifrar y Guardar");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem7);

        jMenuItem4.setText("Salir");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenuBar1.add(jMenu1);

        jMenu3.setText("Help");

        jMenuItem5.setText("About");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem5);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(statusLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(12, 12, 12))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jToolBar2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 338, Short.MAX_VALUE)))
                .addComponent(fileSource, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jToolBar2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(statusLbl))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(61, 61, 61)
                        .addComponent(fileSource)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 343, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    public void importData() {
        String userDir = System.getProperty("user.home");
        JFileChooser chooser = new JFileChooser(userDir + "/Desktop");

        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
                "Solo Archivos de Texto", "txt", "odema");
        chooser.setFileFilter(filter);

        int result = chooser.showOpenDialog(this);

        if (result == JFileChooser.APPROVE_OPTION) {
            System.out.println("APRROVED");
            File file = chooser.getSelectedFile();
            String filePath = file.getAbsolutePath();

            fileSource.setText(filePath);

//            double b = file.length();
//            double kb = b / 1024;
//            String size = String.valueOf(kb);
//            statusLbl.setText(size);
            statusLbl.setText("Status: Importando...");

            try {
                FileReader reader = new FileReader(filePath);
                BufferedReader br = new BufferedReader(reader);
                dataArea.read(br, null);
                br.close();
                System.out.println("Done");
                statusLbl.setText("Status: Inactivo");

            } catch (IOException e) {
            }
        } else {
            System.err.println("CANCELED!");
        }
    }

    //Guardar el archivo con la extension propia. ODEMA
    public void saveDataFile() throws IOException {
        //Seleccionamos el nombre y lugar donde queremos guardar el archivo
        String userDir = System.getProperty("user.home");
        JFileChooser chooser = new JFileChooser(userDir + "/Desktop");
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
                "Solo archivos ODEMA", "odema");
        chooser.setFileFilter(filter);

        int result = chooser.showSaveDialog(this);

        if (result != JFileChooser.APPROVE_OPTION) {
            return;
        }
        File fileName = new File(chooser.getSelectedFile() + ".odema");
        BufferedWriter outFile = null;
        try {
            outFile = new BufferedWriter(new FileWriter(fileName));
            statusLbl.setText("Status: Guardando...");
            dataArea.write(outFile);
            JOptionPane.showMessageDialog(this, "El archivo fue guardado");
            dataArea.setText("");
            statusLbl.setText("Status: Inactivo");
        } catch (IOException ex) {
            System.err.println(ex);
        } finally {
            if (outFile != null) {
                outFile.flush();
                outFile.close();
                outFile = null;
            }
        }
    }

    public void saveCypherData() throws Throwable {
        //Seleccionamos el nombre y lugar donde queremos guardar el archivo
        String userDir = System.getProperty("user.home");
        JFileChooser chooser = new JFileChooser(userDir + "/Desktop");
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
                "Solo archivos ODEMA", "odema");
        chooser.setFileFilter(filter);

        int result = chooser.showSaveDialog(this);

        if (result != JFileChooser.APPROVE_OPTION) {
            return;
        }
        File fileName = new File(chooser.getSelectedFile() + ".odema");
        BufferedWriter outFile = null;
        try {
            outFile = new BufferedWriter(new FileWriter(fileName));
            dataArea.write(outFile);
            try {
                Process p = Runtime.getRuntime().exec("attrib +H " + fileName.getPath());
                p.waitFor();
                Scanner input = new Scanner(fileName.toString());
                String str = input.nextLine();
                File file = new File(str);

                Scanner fileScanner = new Scanner(file);
                Scanner fileSize = new Scanner(file);
                String line = "";

                int n1 = 0;
                int n2 = 0;
                while (fileSize.hasNext()) {
                    line = fileSize.nextLine();
                    n1++;
                }

                while (fileScanner.hasNext()) {
                    line = fileScanner.nextLine();
                    //System.out.println("Contents of your file being compressed: \n"
                    //      + line);
                    //System.out.println(nsize + " - " +n++);
                    n2++;
                }
                System.out.println(n1 + " --- " + n2);
                statusLbl.setText("Status: Cifrando");

                String absoluteFilePath = "";
                String filename = str;
                String workingDirectory = System.getProperty("user.dir");

                absoluteFilePath = workingDirectory + File.separator + filename;
                System.out.println("\nFinal filepath : " + absoluteFilePath);
                FileInputStream fis;
                fis = new FileInputStream(filename);
                FileOutputStream fos = new FileOutputStream(filename.concat(".ec"));
                DESEncryptDecrypt.encrypt(key, fis, fos);

                fis.close();
                fos.close();
                fileScanner.close();
                JOptionPane.showMessageDialog(this, "El archivo fue cifrado");
                statusLbl.setText("Status: Inactivo");
            } catch (Exception e) {
                System.out.println("File Not Found.");
            }
            System.out.println("File Saved and Encrypted");
            dataArea.setText("");
        } catch (IOException ex) {
            System.err.println(ex);
        } finally {
            if (outFile != null) {
                outFile.flush();
                outFile.close();
                outFile = null;
                System.gc();
                while (fileName.exists()) {
                    fileName.delete();
                }
            }
        }
    }

    public void saveCompressData() throws IOException, InterruptedException {
        LZWCompression lzw = new LZWCompression();

        String userDir = System.getProperty("user.home");
        JFileChooser chooser = new JFileChooser(userDir + "/Desktop");

        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
                "Solo archivos ODEMA", "odema");
        chooser.setFileFilter(filter);

        int result = chooser.showSaveDialog(this);

        if (result != JFileChooser.APPROVE_OPTION) {
            return;
        }

        File fileName = new File(chooser.getSelectedFile() + ".odema"); // Guadar el archivo junto con la extension
        BufferedWriter outFile = null;
        String filepath = fileName.getCanonicalPath();
        System.out.println("path: " + filepath);
        statusLbl.setText("Status: Comprimiendo...");
        try {
            outFile = new BufferedWriter(new FileWriter(fileName));
            dataArea.write(outFile); //Guardar el archivo usando los datos del TextBox
            try {
                Process p = Runtime.getRuntime().exec("attrib +H " + fileName.getPath());
                p.waitFor();
                Scanner input = new Scanner(fileName.toString());
                String str = input.nextLine();
                File file = new File(str);
                Scanner fileScanner = new Scanner(file);
                Scanner fileSize = new Scanner(file);
                String line = "";

                int n1 = 0;
                int n2 = 0;
                while (fileSize.hasNext()) {
                    line = fileSize.nextLine();
                    n1++;
                }

                while (fileScanner.hasNext()) {
                    line = fileScanner.nextLine();
                    //System.out.println("Contents of your file being compressed: \n"
                    //      + line);
                    //System.out.println(nsize + " - " +n++);
                    n2++;
                }
                System.out.println(n1 + " --- " + n2);
                lzw.compress(str);
                JOptionPane.showMessageDialog(this, "El archivo fue comprimido");
                fileScanner.close();
                statusLbl.setText("Status: Inactivo");

            } catch (IOException | HeadlessException e) {
                System.out.println("File Not Found.");
            }
            dataArea.setText("");
        } catch (IOException ex) {
            System.err.println(ex);
        } finally {
            if (outFile != null) {
                outFile.flush();
                outFile.close();
                outFile = null;
                System.gc();
                while (fileName.exists()) {
                    fileName.delete();
                }
            }
        }
    }

    public void saveCompressCypherData() throws Throwable {
        LZWCompression lzw = new LZWCompression();

        String userDir = System.getProperty("user.home");
        JFileChooser chooser = new JFileChooser(userDir + "/Desktop");

        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
                "Solo archivos ODEMA", "odema");
        chooser.setFileFilter(filter);

        int result = chooser.showSaveDialog(this);

        if (result != JFileChooser.APPROVE_OPTION) {
            return;
        }

        File fileName = new File(chooser.getSelectedFile() + ".odema"); // Guadar el archivo junto con la extension
        BufferedWriter outFile = null;
        statusLbl.setText("Status: Comprimiendo...");
        try {
            outFile = new BufferedWriter(new FileWriter(fileName));
            dataArea.write(outFile); //Guardar el archivo usando los datos del TextBox
            try {
                Process p = Runtime.getRuntime().exec("attrib +H " + fileName.getPath());
                p.waitFor();
                Scanner input = new Scanner(fileName.toString());
                String str = input.nextLine();
                File file = new File(str);
                Scanner fileScanner = new Scanner(file);
                Scanner fileSize = new Scanner(file);
                String line = "";

                int n1 = 0;
                int n2 = 0;
                while (fileSize.hasNext()) {
                    line = fileSize.nextLine();
                    n1++;
                }
                while (fileScanner.hasNext()) {
                    line = fileScanner.nextLine();
                    //System.out.println("Contents of your file being compressed: \n"
                    //      + line);
                    //System.out.println(nsize + " - " +n++);
                    n2++;
                }
                System.out.println(n1 + " --- " + n2);
                lzw.compress(str);
                statusLbl.setText("Status: Cifrando...");

                String absoluteFilePath = "";
                String filename = str.concat(".compressed");
                String workingDirectory = System.getProperty("user.dir");

                absoluteFilePath = workingDirectory + File.separator + filename;
                System.out.println("\nFinal filepath : " + absoluteFilePath);

                FileInputStream fis = new FileInputStream(filename);
                FileOutputStream fos = new FileOutputStream(filename.concat(".ec"));
                DESEncryptDecrypt.encrypt(key, fis, fos);

                File cd = new File(str + ".compressed");
                cd.delete();
                JOptionPane.showMessageDialog(this, "El archivo fue comprimido y cifrado");
                statusLbl.setText("Status: Inactivo");
            } catch (Exception e) {
                System.out.println("File Not Found.");
            }
            System.out.println("Saved, Compressed and Encrypted");
            dataArea.setText("");

        } catch (IOException ex) {
            System.err.println(ex);
        } finally {
            if (outFile != null) {
                outFile.flush();
                outFile.close();
                outFile = null;
                System.gc();
                while (fileName.exists()) {
                    fileName.delete();
                }
            }
        }
    }

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        //setExtendedState(JFrame.MAXIMIZED_BOTH);
    }//GEN-LAST:event_formWindowOpened

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (!dataArea.getText().equals("")) {
            String[] buttons = {"Salir", "Regregar al Menu", "Cancelar"};
            int rc = JOptionPane.showOptionDialog(null, "Desea salir?", "Alerta",
                    JOptionPane.INFORMATION_MESSAGE, 0, null, buttons, buttons[0]);
            System.out.println(rc);
            switch (rc) {
                case 0:
                    System.exit(0);
                    break;
                case 1:
                    this.dispose();
                    menu menu = new menu();
                    menu.setVisible(true);
                    break;
                case 2:
                    setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
                    break;
            }
        }
        if (dataArea.getText().equals("")) {
            String[] buttons = {"Salir", "Regregar al Menu", "Cancelar"};
            int rc = JOptionPane.showOptionDialog(null, "Desea salir?", "Alerta",
                    JOptionPane.INFORMATION_MESSAGE, 0, null, buttons, buttons[0]);
            System.out.println(rc);
            switch (rc) {
                case 0:
                    System.exit(0);
                    break;
                case 1:
                    this.dispose();
                    menu menu = new menu();
                    menu.setVisible(true);
                    break;
                case 2:
                    setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
                    break;
            }
        }
    }//GEN-LAST:event_formWindowClosing

    private void saveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBtnActionPerformed
        String[] buttons = {"Guardar", "Encriptar y Guardar", "Comprimir y Guardar", "Todo", "Cancelar"};

        if (dataArea.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Para guardar, primero tienes que haber"
                    + " escrito algo. \nRecuerda que tambien puede importar datos desde"
                    + " un archivo .txt o odema.", "Error", JOptionPane.WARNING_MESSAGE);
        } else {
            int rc = JOptionPane.showOptionDialog(null, "Esta a punto de guardar el archivo, pero puede hacer otras cosas el. Que desea hacer?", "",
                    JOptionPane.INFORMATION_MESSAGE, 0, null, buttons, buttons[0]);
            System.out.println(rc);
            switch (rc) {
                case 0: {
                    JOptionPane.showMessageDialog(this, "Dependiendo de el archivo, esto puede tardar mas de unos minutos.\nPor favor espere....", "Guardar Archivo", JOptionPane.PLAIN_MESSAGE);
                    try {
                        saveDataFile();

                    } catch (IOException ex) {
                        Logger.getLogger(createFile.class
                                .getName()).log(Level.SEVERE, null, ex);
                    }
                }
                break;
                case 1: {
                    try {
                        JOptionPane.showMessageDialog(this, "Dependiendo de el archivo, esto puede tardar mas de unos minutos.\nPor favor espere....", "Encriptar Archivo", JOptionPane.PLAIN_MESSAGE);
                        saveCypherData();

                    } catch (Throwable ex) {
                        Logger.getLogger(createFile.class
                                .getName()).log(Level.SEVERE, null, ex);
                    }
                }
                break;
                case 2:
                    JOptionPane.showMessageDialog(this, "Dependiendo de el archivo, esto puede tardar mas de unos minutos.\nPor favor espere....", "Comprimiendo Archivo", JOptionPane.PLAIN_MESSAGE);
                     {
                        try {
                            saveCompressData();

                        } catch (IOException ex) {
                            Logger.getLogger(createFile.class
                                    .getName()).log(Level.SEVERE, null, ex);
                        } catch (InterruptedException ex) {
                    Logger.getLogger(createFile.class.getName()).log(Level.SEVERE, null, ex);
                }
                    }
                    break;
                case 3: {
                    try {
                        JOptionPane.showMessageDialog(this, "Dependiendo de el archivo, esto puede tardar mas de unos minutos.\nPor favor espere....", "Comprimiendo y Cifrando Archivo", JOptionPane.PLAIN_MESSAGE);
                        saveCompressCypherData();

                    } catch (Throwable ex) {
                        Logger.getLogger(createFile.class
                                .getName()).log(Level.SEVERE, null, ex);
                    }
                }
                break;
                case 4:
                    break;
            }
        }
    }//GEN-LAST:event_saveBtnActionPerformed

    private void importBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importBtnActionPerformed
        importData();
    }//GEN-LAST:event_importBtnActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        importData();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        try {
            saveDataFile();

        } catch (IOException ex) {
            Logger.getLogger(createFile.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        try {
            saveCypherData();

        } catch (Throwable ex) {
            Logger.getLogger(createFile.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        try {
            saveCompressCypherData();

        } catch (Throwable ex) {
            Logger.getLogger(createFile.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        this.dispose();
        menu menu = new menu();
        menu.setVisible(true);
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        about a = new about();
        a.setVisible(true);
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */

        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(createFile.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        }
        //</editor-fold>
        //</editor-fold>

        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new createFile().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea dataArea;
    private javax.swing.JLabel fileSource;
    private javax.swing.JButton importBtn;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JToolBar jToolBar2;
    private javax.swing.JButton saveBtn;
    private javax.swing.JLabel statusLbl;
    // End of variables declaration//GEN-END:variables
}
